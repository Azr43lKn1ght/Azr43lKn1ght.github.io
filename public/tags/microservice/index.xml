<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservice on Azr43lkn1ght</title>
    <link>http://localhost:1313/tags/microservice/</link>
    <description>Recent content in Microservice on Azr43lkn1ght</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Apr 2024 05:51:15 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/microservice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微服务安全沉思录之三</title>
      <link>http://localhost:1313/2018/05/23/external_system_auth/</link>
      <pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/external_system_auth/</guid>
      <description>外部系统访问控制除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。&#xA;使用账号进行控制可以为外部系统创建一个用户账号，类似普通用户一样对外部系统的账号进行管理，并使用该账号对外部系统进行认证和权限控制。&#xA;采用这种方式的问题是难以处理用户相关的敏感数据。因为外部系统自身也是微服务系统中的一个用户账号，因此该外部系统只能访问该账号自身的数据和一些不敏感的公共数据，而不能访问和用户相关的数据。例如在网上商店的例子中，外部系统可以采用该方式访问商品目录信息，但不应允许访问用户历史购买记录，用户余额等信息。&#xA;API Token是一个 API Token（又称 API Key）可以控制对用户敏感数据的访问。微服务应用提供一个 API Token 的生成界面，用户登录后可以生成自己的 API Token，并在第三方应用使用该 API Token 访问微服务的 API。在这种情况下，一般只允许第三方应用访问该 Token 所属用户自身的数据，而不能访问其他用户的敏感私有数据。&#xA;例如 Github 就提供了 Personal API Token 功能，用户可以在&#xD;Github 的开发者设置界面&#xD;中创建 Token，然后使用该 Token 来访问 Github 的 API。在创建 Token 时，可以设置该 Token 可以访问用户的哪些数据，如查看 Repo 信息，删除 Repo，查看用户信息，更新用户信息等。&#xA;使用 API Token 来访问 Github API&#xA;curl -u zhaohuabing:fbdf8e8862252ed0f3ba9dba4e328c01ac93aeec https://api.github.com/user 不用试了,这不是我的真实 API Token, just for demonstration :-)&#xA;使用 API Token 而不是直接使用用户名/密码来访问 API 的好处是降低了用户密码暴露的风险，并且可以随时收回 Token 的权限而不用修改密码。&#xA;由于 API Token 只能访问指定用户的数据，因此适合于用户自己开发一些脚本或小程序对应用中自己的数据进行操作。</description>
    </item>
    <item>
      <title>微服务安全沉思录之二</title>
      <link>http://localhost:1313/2018/05/23/service_2_service_auth/</link>
      <pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/service_2_service_auth/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;服务间认证与鉴权&#34;&gt;服务间认证与鉴权&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e9%97%b4%e8%ae%a4%e8%af%81%e4%b8%8e%e9%89%b4%e6%9d%83&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户间接触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。&lt;/li&gt;&#xA;&lt;li&gt;非用户触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如数据同步或者后台定时任务导致的微服务之间的相互访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微服务安全沉思录之一</title>
      <link>http://localhost:1313/2018/05/22/user_authentication_authorization/</link>
      <pubDate>Tue, 22 May 2018 10:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/22/user_authentication_authorization/</guid>
      <description>这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清了在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。&#xA;在这一系列文章里，我将尝试分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。&#xA;前言微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。&#xA;相对于传统单体应用，微服务架构下的认证和鉴权涉及到场景更为复杂，涉及到用户访问微服务应用，第三方应用访问微服务应用，应用内多个微服务之间相互访问等多种场景，每种场景下的认证和鉴权方案都需要考虑到，以保证应用程序的安全性。本系列博文将就此问题进行一次比较完整的探讨。&#xA;微服务认证和鉴权涉及到的三种场景&#xD;用户认证和鉴权用户身份认证一个完整的微服务应用是由多个相互独立的微服务进程组成的，对每个微服务的访问都需要进行用户认证。如果将用户认证的工作放到每个微服务中，存在下面一些问题：&#xA;需要在各个微服务中重复实现这部分公共逻辑。虽然我们可以使用代码库复用部分代码，但这又会导致所有微服务对特定代码库及其版本存在依赖，影响微服务语言/框架选择的灵活性。 将认证和鉴权的公共逻辑放到微服务实现中违背了单一职责原理，开发人员应重点关注微服务自身的业务逻辑。 用户需要分别登录以访问系统中不同的服务。 由于在微服务架构中以 API Gateway 作为对外提供服务的入口，因此可以在 API Gateway 处提供统一的用户认证，用户只需要登录一次，就可以访问系统中所有微服务提供的服务。&#xA;用户状态保持HTTP 是一个无状态的协议，对服务器来说，用户的每次 HTTP 请求是相互独立的。互联网是一个巨大的分布式系统，HTTP 协议作为互联网上的一个重要协议，在设计之初要考虑到大量应用访问的效率问题。无状态意味着服务端可以把客户端的请求根据需要发送到集群中的任何一个节点，HTTP 的无状态设计对负载均衡有明显的好处，由于没有状态，用户请求可以被分发到任意一个服务器，应用也可以在靠近用户的网络边缘部署缓存服务器。对于不需要身份认证的服务，例如浏览新闻网页等，这是没有任何问题的。但 HTTP 成为企业应用的一个事实标准后，企业应用需要保存用户的登录状态和身份以进行更严格的权限控制。因此需要在 HTTP 协议基础上采用一种方式保存用户的登录状态，避免用户每发起一次请求都需要进行验证。&#xA;传统方式是在服务器端采用 Cookie 来保存用户状态，由于在服务器是有状态的，对服务器的水平扩展有影响。在微服务架构下建议采用 Token 来记录用户登录状态。&#xA;Token 和 Seesion 主要的不同点是存储的地方不同。Session 是集中存储在服务器中的；而 Token 是用户自己持有的，一般以 cookie 的形式存储在浏览器中。Token 中保存了用户的身份信息，每次请求都会发送给服务器，服务器因此可以判断访问者的身份，并判断其对请求的资源有没有访问权限。&#xA;Token 用于表明用户身份，因此需要对其内容进行加密，避免被请求方或者第三者篡改。&#xD;JWT(Json Web Token)&#xD;是一个定义 Token 格式的开放标准(RFC 7519),定义了 Token 的内容，加密方式，并提供了各种语言的 lib。&#xA;JWT Token 的结构非常简单，包括三部分：&#xA;Header 头部包含类型,为固定值 JWT。然后是 JWT 使用的 Hash 算法。 {&#xD;&amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34;,&#xD;&amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34;&#xD;} Payload 包含发布者，过期时间，用户名等标准信息，也可以添加用户角色，用户自定义的信息。 {&#xD;&amp;#34;sub&amp;#34;: &amp;#34;1234567890&amp;#34;,&#xD;&amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;,&#xD;&amp;#34;admin&amp;#34;: true&#xD;} Signature Token 颁发方的签名，用于客户端验证 Token 颁发方的身份，也用于服务器防止 Token 被篡改。 签名算法 HMACSHA256(&#xD;base64UrlEncode(header) + &amp;#34;.</description>
    </item>
    <item>
      <title>Service Mesh 和 API Gateway的关系探讨（译文）</title>
      <link>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</link>
      <pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</guid>
      <description>Service Mesh vs API Gateway在&#xD;前一篇关于 Service Mesh 的文章&#xD;中,我提到了几个关于 Service Mesh 和 API Gateway 之间关系的问题，在本篇文章中，我打算就 Service Mesh 和 API Gateway 的用途进行进一步讨论。&#xA;为了区分 API Gateway 和 Service Mesh，让我们先分别看看两者各自的关键特征。&#xA;API Gateway: 将服务作为被管理的 API 向外部暴露使用 API Gateway 的主要目的是将微服务作为被管理的 API 暴露（给外部系统）。因此，我们在 API Gateway 层开发的 API 或者边界服务对外提供了业务功能。&#xA;API/边界服务调用下游的组合或者原子微服务，通过组合/混装多个下游微服务的方式来提供业务逻辑。&#xA;在 API/Edge 服务调用下游服务时，需要采用一种可靠的通信方式，应用了断路器，超时，负载均衡/故障转移等可靠性模式。因此大部分的 API Gateway 解决方案都内置了这些特性。&#xA;API Gateway 也内置了以下特性的支持，包括：服务发现，分析（可见性：性能指标，监控，分布式日志，分布式调用追踪）和安全。&#xA;API Gateway 和 API 管理生态系统的其他组件的关系紧密，比如： API 市场/商店， API 发布门户。&#xA;Service Mesh：微服务的网络通信基础设施现在我们来看看 Service Mesh 有哪些不同。&#xA;Service Mesh 是一个网络通信基础设施， 可以用于将应用层的网络通信功能从你的服务代码中剥离出来。</description>
    </item>
    <item>
      <title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title>
      <link>http://localhost:1313/2018/03/29/what-is-service-mesh-and-istio/</link>
      <pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/03/29/what-is-service-mesh-and-istio/</guid>
      <description>微服务架构的演进作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。&#xA;另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。&#xA;该变化带来了分布式系统的一系列问题，例如：&#xA;如何找到服务的提供方？ 如何保证远程方法调用的可靠性？ 如何保证服务调用的安全性？ 如何降低服务调用的延迟？ 如何进行端到端的调试？ 另外生产部署中的微服务实例也增加了运维的难度,例如：&#xA;如何收集大量微服务的性能指标已进行分析？ 如何在不影响上线业务的情况下对微服务进行升级？ 如何测试一个微服务集群部署的容错和稳定性？ 这些问题涉及到成百上千个服务的通信、管理、部署、版本、安全、故障转移、策略执行、遥测和监控等，要解决这些微服务架构引入的问题并非易事。&#xA;让我们来回顾一下微服务架构的发展过程。在出现服务网格之前，我们最开始在微服务应用程序内理服务之间的通讯逻辑，包括服务发现，熔断，重试，超时，加密，限流等逻辑。&#xA;在一个分布式系统中，这部分逻辑比较复杂，为了为微服务应用提供一个稳定、可靠的基础设施层，避免大家重复造轮子，并减少犯错的可能，一般会通过对这部分负责服务通讯的逻辑进行抽象和归纳，形成一个代码库供各个微服务应用程序使用，如下图所示：&#xA;公共的代码库减少了应用程序的开发和维护工作量，降低了由应用开发人员单独实现微服务通讯逻辑出现错误的机率，但还是存在下述问题：&#xA;微服务通讯逻辑对应用开发人员并不透明，应用开发人员需要理解并正确使用代码 库，不能将其全部精力聚焦于业务逻辑。 需要针对不同的语言/框架开发不同的代码库，反过来会影响微服务应用开发语言 和框架的选择，影响技术选择的灵活性。 随着时间的变化，代码库会存在不同的版本，不同版本代码库的兼容性和大量运行 环境中微服务的升级将成为一个难题。 可以将微服务之间的通讯基础设施层和 TCP/IP 协议栈进行类比。TCP/IP 协议栈为操作系统中的所有应用提供基础通信服务，但 TCP/IP 协议栈和应用程序之间并没有紧密的耦合关系，应用只需要使用 TCP/IP 协议提供的底层通讯功能,并不关心 TCP/IP 协议的实现，如 IP 如何进行路由，TCP 如何创建链接等。&#xA;同样地，微服务应用也不应该需要关注服务发现，Load balancing，Retries，Circuit Breaker 等微服务之间通信的底层细节。如果将为微服务提供通信服务的这部分逻辑从应用程序进程中抽取出来，作为一个单独的进程进行部署，并将其作为服务间的通信代理，可以得到如下图所示的架构：&#xA;因为通讯代理进程伴随应用进程一起部署，因此形象地把这种部署方式称为“sidecar”/边车（即三轮摩托的挎斗）。&#xA;应用间的所有流量都需要经过代理，由于代理以 sidecar 方式和应用部署在同一台主机上，应用和代理之间的通讯可以被认为是可靠的。由代理来负责找到目的服务并负责通讯的可靠性和安全等问题。&#xA;当服务大量部署时，随着服务部署的 sidecar 代理之间的连接形成了一个如下图所示的网格，该网格成为了微服务的通讯基础设施层，承载了微服务之间的所有流量，被称之为 Service Mesh（服务网格）。&#xA;_服务网格是一个基础设施层，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证请求可以在这些拓扑中可靠地穿梭。在实际应用当中，服务网格通常是由一系列轻量级的网络代理组成的，它们与应用程序部署在一起，但应用程序不需要知道它们的存在。&#xA;_William Morgan _&#xD;WHAT’S A SERVICE MESH? AND WHY DO I NEED ONE? _&#xA;服务网格中有数量众多的 Sidecar 代理，如果对每个代理分别进行设置，工作量将非常巨大。为了更方便地对服务网格中的代理进行统一集中控制，在服务网格上增加了控制面组件。&#xA;这里我们可以类比 SDN 的概念，控制面就类似于 SDN 网管中的控制器，负责路由策略的指定和路由规则下发；数据面类似于 SDN 网络中交换机，负责数据包的转发。</description>
    </item>
    <item>
      <title>如何构建安全的微服务应用？</title>
      <link>http://localhost:1313/2018/05/22/authentication-and-authorization-of-microservice/</link>
      <pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/22/authentication-and-authorization-of-microservice/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;前言&#34;&gt;前言&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
