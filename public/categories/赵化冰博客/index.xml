<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>赵化冰博客 on Azr43lkn1ght</title>
    <link>http://localhost:1313/categories/%E8%B5%B5%E5%8C%96%E5%86%B0%E5%8D%9A%E5%AE%A2/</link>
    <description>Recent content in 赵化冰博客 on Azr43lkn1ght</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Apr 2024 05:51:15 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E8%B5%B5%E5%8C%96%E5%86%B0%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Istio v1aplha3 routing API介绍（译文）</title>
      <link>http://localhost:1313/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid>
      <description>&lt;p&gt;到目前为止，Istio 提供了一个简单的 API 来进行流量管理，该 API 包括了四种资源：RouteRule，DestinationPolicy，EgressRule 和 Ingress（直接使用了 Kubernets 的 Ingress 资源）。借助此 API，用户可以轻松管理 Istio 服务网格中的流量。该 API 允许用户将请求路由到特定版本的服务，为弹性测试注入延迟和失败，添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。&lt;/p&gt;&#xA;&lt;p&gt;虽然目前 API 的功能已被证明是 Istio 非常引人注目的一部分，但用户的反馈也表明，这个 API 确实有一些缺点，尤其是在使用它来管理包含数千个服务的非常大的应用程序，以及使用 HTTP 以外的协议时。 此外，使用 Kubernetes Ingress 资源来配置外部流量的方式已被证明不能满足需求。&lt;/p&gt;&#xA;&lt;p&gt;为了解决上述缺陷和其他的一些问题，Istio 引入了新的流量管理 API v1alpha3，新版本的 API 将完全取代之前的 API。 尽管 v1alpha3 和之前的模型在本质上是基本相同的，但它并不向后兼容的，基于旧 API 的模型需要进行手动转换。 Istio 接下来的几个版本中会提供一个新旧模型的转换工具。&lt;/p&gt;&#xA;&lt;p&gt;为了证明该非兼容升级的必要性，v1alpha3 API 经历了漫长而艰苦的社区评估过程，以希望新的 API 能够大幅改进，并经得起时间考验。 在本文中，我们将介绍新的配置模型，并试图解释其后面的一些动机和设计原则。&lt;/p&gt;&#xA;&lt;h2 class=&#34;group head-tag&#34; id=&#34;设计原则&#34;&gt;设计原则&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;路由模型的重构过程中遵循了一些关键的设计原则：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;除支持声明式（意图）配置外，也支持显式指定模型依赖的基础设施。例如，除了配置入口网关（的功能特性）之外，负责实现 入口网关功能的组件（Controller）也可以在模型指定。&lt;/li&gt;&#xA;&lt;li&gt;编写模型时应该“生产者导向”和“以 Host 为中心”，而不是通过组合多个规则来编写模型。 例如，所有与特定 Host 关联的规则被配置在一起，而不是单独配置。&lt;/li&gt;&#xA;&lt;li&gt;将路由与路由后行为清晰分开。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Istio 0.8 Release发布</title>
      <link>http://localhost:1313/2018/06/02/istio08/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/06/02/istio08/</guid>
      <description>在 6 月 1 日这一天的早上，Istio 社区宣布发布 0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：&#xA;Networking改进的流量管理模型0.8 版本采用了新的流量管理配置模型&#xD;v1alpha3 Route API&#xD;。新版本的模型添加了一些新的特性，并改善了之前版本模型中的可用性问题。主要的改动包括：&#xA;Gateway新版本中不再使用 K8s 中的 Ingress，转而采用 Gateway 来统一配置 Service Mesh 中的各个 HTTP/TCP 负载均衡器。Gateway 可以是处理入口流量的 Ingress Gateway，负责 Service Mesh 内部各个服务间通信的 Sidecar Proxy，也可以是负责出口流量的 Egress Gateway。&#xA;Mesh 中涉及到的三类 Gateway:&#xA;该变化的原因是 K8s 中的 Ingress 对象功能过于简单，不能满足 Istio 灵活的路由规则需求。在 0.8 版本中，L4-L6 的配置和 L7 的配置被分别处理，Gateway 中只配置 L4-L6 的功能，例如暴露的端口，TLS 设置。然后用户可以采用 VirtualService 来配置标准的 Istio 规则，并和 Gateway 进行绑定。&#xA;VirtualService采用 VirtualService 代替了 alpha2 模型中的 RouteRule。采用 VirtualService 有两个优势：&#xA;可以把一个服务相关的规则放在一起管理&#xA;例如下面的路由规则，发向 reviews 的请求流量缺省 destination 为 v1，如果 user 为 jason 则路由到 v2。在 v1 模型中需要采用两条规则来实现，采用 VirtualService 后放到一个规则下就可以实现。</description>
    </item>
    <item>
      <title>Everything about Setting Up My Ubuntu Desktop</title>
      <link>http://localhost:1313/2018/05/24/set_up_my_ubuntu_desktop/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/24/set_up_my_ubuntu_desktop/</guid>
      <description>Generate SSH Key Pairssh-keygen -C &amp;#34;zhaohuabing@gmail.com&amp;#34; ShadowsocksInstall shadowsokcs&#xA;sudo apt-get install python3-pip&#xD;sudo pip3 install shadowsocks Create config at config/shadowsocks.json, with the following content:&#xA;{&#xD;&amp;#34;server&amp;#34;:&amp;#34;remote-shadowsocks-server-ip-addr&amp;#34;,&#xD;&amp;#34;server_port&amp;#34;:443,&#xD;&amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;,&#xD;&amp;#34;local_port&amp;#34;:1080,&#xD;&amp;#34;password&amp;#34;:&amp;#34;your-passwd&amp;#34;,&#xD;&amp;#34;timeout&amp;#34;:300,&#xD;&amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;,&#xD;&amp;#34;fast_open&amp;#34;:false,&#xD;&amp;#34;workers&amp;#34;:1&#xD;} Start a local socks proxy&#xA;sudo sslocal -c config/shadowsocks.json -d start In case there is an openssl error, modify shadowsocks source file.&#xA;sudo vi /usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py&#xD;:%s/cleanup/reset/gc Convert shadowsocks socks proxy to http proxy&#xA;sudo apt-get install polipo&#xD;echo &amp;#34;socksParentProxy = localhost:1080&amp;#34; | sudo tee -a /etc/polipo/config&#xD;sudo service polipo restart Http proxy now is available at port 8123</description>
    </item>
    <item>
      <title>微服务安全沉思录之三</title>
      <link>http://localhost:1313/2018/05/23/external_system_auth/</link>
      <pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/external_system_auth/</guid>
      <description>外部系统访问控制除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。&#xA;使用账号进行控制可以为外部系统创建一个用户账号，类似普通用户一样对外部系统的账号进行管理，并使用该账号对外部系统进行认证和权限控制。&#xA;采用这种方式的问题是难以处理用户相关的敏感数据。因为外部系统自身也是微服务系统中的一个用户账号，因此该外部系统只能访问该账号自身的数据和一些不敏感的公共数据，而不能访问和用户相关的数据。例如在网上商店的例子中，外部系统可以采用该方式访问商品目录信息，但不应允许访问用户历史购买记录，用户余额等信息。&#xA;API Token是一个 API Token（又称 API Key）可以控制对用户敏感数据的访问。微服务应用提供一个 API Token 的生成界面，用户登录后可以生成自己的 API Token，并在第三方应用使用该 API Token 访问微服务的 API。在这种情况下，一般只允许第三方应用访问该 Token 所属用户自身的数据，而不能访问其他用户的敏感私有数据。&#xA;例如 Github 就提供了 Personal API Token 功能，用户可以在&#xD;Github 的开发者设置界面&#xD;中创建 Token，然后使用该 Token 来访问 Github 的 API。在创建 Token 时，可以设置该 Token 可以访问用户的哪些数据，如查看 Repo 信息，删除 Repo，查看用户信息，更新用户信息等。&#xA;使用 API Token 来访问 Github API&#xA;curl -u zhaohuabing:fbdf8e8862252ed0f3ba9dba4e328c01ac93aeec https://api.github.com/user 不用试了,这不是我的真实 API Token, just for demonstration :-)&#xA;使用 API Token 而不是直接使用用户名/密码来访问 API 的好处是降低了用户密码暴露的风险，并且可以随时收回 Token 的权限而不用修改密码。&#xA;由于 API Token 只能访问指定用户的数据，因此适合于用户自己开发一些脚本或小程序对应用中自己的数据进行操作。</description>
    </item>
    <item>
      <title>微服务安全沉思录之二</title>
      <link>http://localhost:1313/2018/05/23/service_2_service_auth/</link>
      <pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/service_2_service_auth/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;服务间认证与鉴权&#34;&gt;服务间认证与鉴权&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e9%97%b4%e8%ae%a4%e8%af%81%e4%b8%8e%e9%89%b4%e6%9d%83&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户间接触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。&lt;/li&gt;&#xA;&lt;li&gt;非用户触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如数据同步或者后台定时任务导致的微服务之间的相互访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Istio Sidecar自动注入原理</title>
      <link>http://localhost:1313/2018/05/23/istio-auto-injection-with-webhook/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/istio-auto-injection-with-webhook/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;前言&#34;&gt;前言&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;&#xA;&lt;p&gt;Kubernets 1.9 版本引入了 Admission Webhook(web 回调)扩展机制，通过 Webhook,开发者可以非常灵活地对 Kubernets API Server 的功能进行扩展，在 API Server 创建资源时对资源进行验证或者修改。&lt;/p&gt;&#xA;&lt;p&gt;使用 webhook 的优势是不需要对 API Server 的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的 web 进程，通过参数方式传入到 kubernets 中，由 kubernets 在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p&gt;&#xA;&lt;p&gt;Istio 0.7 版本就利用了 Kubernets webhook 实现了 sidecar 的自动注入。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微服务安全沉思录之一</title>
      <link>http://localhost:1313/2018/05/22/user_authentication_authorization/</link>
      <pubDate>Tue, 22 May 2018 10:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/22/user_authentication_authorization/</guid>
      <description>这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清了在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。&#xA;在这一系列文章里，我将尝试分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。&#xA;前言微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。&#xA;相对于传统单体应用，微服务架构下的认证和鉴权涉及到场景更为复杂，涉及到用户访问微服务应用，第三方应用访问微服务应用，应用内多个微服务之间相互访问等多种场景，每种场景下的认证和鉴权方案都需要考虑到，以保证应用程序的安全性。本系列博文将就此问题进行一次比较完整的探讨。&#xA;微服务认证和鉴权涉及到的三种场景&#xD;用户认证和鉴权用户身份认证一个完整的微服务应用是由多个相互独立的微服务进程组成的，对每个微服务的访问都需要进行用户认证。如果将用户认证的工作放到每个微服务中，存在下面一些问题：&#xA;需要在各个微服务中重复实现这部分公共逻辑。虽然我们可以使用代码库复用部分代码，但这又会导致所有微服务对特定代码库及其版本存在依赖，影响微服务语言/框架选择的灵活性。 将认证和鉴权的公共逻辑放到微服务实现中违背了单一职责原理，开发人员应重点关注微服务自身的业务逻辑。 用户需要分别登录以访问系统中不同的服务。 由于在微服务架构中以 API Gateway 作为对外提供服务的入口，因此可以在 API Gateway 处提供统一的用户认证，用户只需要登录一次，就可以访问系统中所有微服务提供的服务。&#xA;用户状态保持HTTP 是一个无状态的协议，对服务器来说，用户的每次 HTTP 请求是相互独立的。互联网是一个巨大的分布式系统，HTTP 协议作为互联网上的一个重要协议，在设计之初要考虑到大量应用访问的效率问题。无状态意味着服务端可以把客户端的请求根据需要发送到集群中的任何一个节点，HTTP 的无状态设计对负载均衡有明显的好处，由于没有状态，用户请求可以被分发到任意一个服务器，应用也可以在靠近用户的网络边缘部署缓存服务器。对于不需要身份认证的服务，例如浏览新闻网页等，这是没有任何问题的。但 HTTP 成为企业应用的一个事实标准后，企业应用需要保存用户的登录状态和身份以进行更严格的权限控制。因此需要在 HTTP 协议基础上采用一种方式保存用户的登录状态，避免用户每发起一次请求都需要进行验证。&#xA;传统方式是在服务器端采用 Cookie 来保存用户状态，由于在服务器是有状态的，对服务器的水平扩展有影响。在微服务架构下建议采用 Token 来记录用户登录状态。&#xA;Token 和 Seesion 主要的不同点是存储的地方不同。Session 是集中存储在服务器中的；而 Token 是用户自己持有的，一般以 cookie 的形式存储在浏览器中。Token 中保存了用户的身份信息，每次请求都会发送给服务器，服务器因此可以判断访问者的身份，并判断其对请求的资源有没有访问权限。&#xA;Token 用于表明用户身份，因此需要对其内容进行加密，避免被请求方或者第三者篡改。&#xD;JWT(Json Web Token)&#xD;是一个定义 Token 格式的开放标准(RFC 7519),定义了 Token 的内容，加密方式，并提供了各种语言的 lib。&#xA;JWT Token 的结构非常简单，包括三部分：&#xA;Header 头部包含类型,为固定值 JWT。然后是 JWT 使用的 Hash 算法。 {&#xD;&amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34;,&#xD;&amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34;&#xD;} Payload 包含发布者，过期时间，用户名等标准信息，也可以添加用户角色，用户自定义的信息。 {&#xD;&amp;#34;sub&amp;#34;: &amp;#34;1234567890&amp;#34;,&#xD;&amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;,&#xD;&amp;#34;admin&amp;#34;: true&#xD;} Signature Token 颁发方的签名，用于客户端验证 Token 颁发方的身份，也用于服务器防止 Token 被篡改。 签名算法 HMACSHA256(&#xD;base64UrlEncode(header) + &amp;#34;.</description>
    </item>
    <item>
      <title>Helm介绍</title>
      <link>http://localhost:1313/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Mon, 16 Apr 2018 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>前言 Helm 是 Kubernetes 生态系统中的一个软件包管理工具。本文将介绍为何要使用 Helm 进行 Kubernetes 软件包管理，澄清 Helm 中使用到的相关概念，并通过一个具体的示例学习如何使用 Helm 打包，分发，安装，升级及回退 Kubernetes 应用。&#xA;Kubernetes 应用部署的挑战 让我们首先来看看 Kubernetes，kubernetes 提供了基于容器的应用集群管理，为容器化应用提供了部署运行、资源调度、服务发现和动态伸缩等一系列完整功能。&#xA;kubernetes 的核心设计理念是: 用户定义应用程序的规格，而 kubernetes 则负责按照定义的规则部署并运行应用程序，如果应用系统出现问题导致偏离了定义的规格，kubernetes 负责对其进行自动修正。例如应用规格要求部署两个实例，其中一个实例异常终止了，kubernetes 会检查到并重新启动一个新的实例。&#xA;用户通过使用 kubernetes API 对象来描述应用程序规格，包括 Pod，Service，Volume，Namespace，ReplicaSet，Deployment，Job 等等。一般这些对象需要写入一系列的 yaml 文件中，然后通过 kubernetes 命令行工具 kubectl 进行部署。&#xA;以下面的 wordpress 应用程序为例，涉及到多个 kubernetes API 对象，这些 kubernetes API 对象分散在多个 yaml 文件中。&#xA;图 1： Wordpress 应用程序中涉及到的 kubernetes API 对象&#xD;可以看到，在进行 kubernetes 软件部署时，我们面临下述问题：&#xA;如何管理，编辑和更新这些这些分散的 kubernetes 应用配置文件？ 如何把一套的相关配置文件作为一个应用进行管理？ 如何分发和重用 kubernetes 的应用配置？ Helm 的引入很好地解决上面这些问题。&#xA;Helm 是什么？ 很多人都使用过 Ubuntu 下的 ap-get 或者 CentOS 下的 yum, 这两者都是 Linux 系统下的包管理工具。采用 apt-get/yum,应用开发者可以管理应用包之间的依赖关系，发布应用；用户则可以以简单的方式查找、安装、升级、卸载应用程序。</description>
    </item>
    <item>
      <title>Service Mesh 和 API Gateway的关系探讨（译文）</title>
      <link>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</link>
      <pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</guid>
      <description>Service Mesh vs API Gateway在&#xD;前一篇关于 Service Mesh 的文章&#xD;中,我提到了几个关于 Service Mesh 和 API Gateway 之间关系的问题，在本篇文章中，我打算就 Service Mesh 和 API Gateway 的用途进行进一步讨论。&#xA;为了区分 API Gateway 和 Service Mesh，让我们先分别看看两者各自的关键特征。&#xA;API Gateway: 将服务作为被管理的 API 向外部暴露使用 API Gateway 的主要目的是将微服务作为被管理的 API 暴露（给外部系统）。因此，我们在 API Gateway 层开发的 API 或者边界服务对外提供了业务功能。&#xA;API/边界服务调用下游的组合或者原子微服务，通过组合/混装多个下游微服务的方式来提供业务逻辑。&#xA;在 API/Edge 服务调用下游服务时，需要采用一种可靠的通信方式，应用了断路器，超时，负载均衡/故障转移等可靠性模式。因此大部分的 API Gateway 解决方案都内置了这些特性。&#xA;API Gateway 也内置了以下特性的支持，包括：服务发现，分析（可见性：性能指标，监控，分布式日志，分布式调用追踪）和安全。&#xA;API Gateway 和 API 管理生态系统的其他组件的关系紧密，比如： API 市场/商店， API 发布门户。&#xA;Service Mesh：微服务的网络通信基础设施现在我们来看看 Service Mesh 有哪些不同。&#xA;Service Mesh 是一个网络通信基础设施， 可以用于将应用层的网络通信功能从你的服务代码中剥离出来。</description>
    </item>
    <item>
      <title>如何配置docker使用HTTP代理</title>
      <link>http://localhost:1313/2018/03/13/use-docker-behind-http-proxy/</link>
      <pubDate>Tue, 13 Mar 2018 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/03/13/use-docker-behind-http-proxy/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;ubuntu&#34;&gt;Ubuntu&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#ubuntu&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 class=&#34;group head-tag&#34; id=&#34;设置-docker-使用-http-proxy&#34;&gt;设置 docker 使用 http proxy&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e8%ae%be%e7%bd%ae-docker-%e4%bd%bf%e7%94%a8-http-proxy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /etc/default/docker&#xD;&#xA;&#xD;&#xA;export http_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xD;&#xA;export https_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xD;&#xA;export HTTP_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xD;&#xA;export HTTPS_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Vim Tips</title>
      <link>http://localhost:1313/2018/02/09/vim-tips/</link>
      <pubDate>Fri, 09 Feb 2018 11:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/02/09/vim-tips/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;vim-graphical-cheat-sheet&#34;&gt;vim graphical cheat sheet&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#vim-graphical-cheat-sheet&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xD;&#xA;  &lt;figure class=&#34;data-image-info &#34;&gt;&#xD;&#xA;    &lt;img&#xD;&#xA;      class=&#34;data-image&#34;&#xD;&#xA;      src=&#34;//img/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg&#34;&#xD;&#xA;      alt=&#34;&#34;&#xD;&#xA;      loading=&#34;lazy&#34; /&gt;&#xD;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xD;&#xA;  &lt;/figure&gt;</description>
    </item>
    <item>
      <title>如何使用非root用户执行docker命令</title>
      <link>http://localhost:1313/2018/02/09/docker-without-sudo/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/02/09/docker-without-sudo/</guid>
      <description>Add the docker group if it doesn&amp;rsquo;t already exist:sudo groupadd docker&#xA;Add the connected user &amp;ldquo;$USER&amp;rdquo; to the docker group. Change the user name to match your preferred user if you do not want to use your current user:sudo gpasswd -a $USER docker&#xA;Either do a newgrp docker or log out/in to activate the changes to groups.</description>
    </item>
    <item>
      <title>如何构建安全的微服务应用？</title>
      <link>http://localhost:1313/2018/05/22/authentication-and-authorization-of-microservice/</link>
      <pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/22/authentication-and-authorization-of-microservice/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;前言&#34;&gt;前言&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx开源Service Mesh组件Nginmesh安装指南</title>
      <link>http://localhost:1313/2018/01/02/nginmesh-install/</link>
      <pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/01/02/nginmesh-install/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;前言&#34;&gt;前言&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Nginmesh 是 NGINX 的 Service Mesh 开源项目，用于 Istio 服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与 Istio 集成作为 sidecar 部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh 在今年底已经连续发布了 0.2 和 0.3 版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Istio实现应用流量转移</title>
      <link>http://localhost:1313/2017/11/07/istio-traffic-shifting/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/07/istio-traffic-shifting/</guid>
      <description>&lt;p&gt;关于 Istio 的更多内容请参考&#xD;&#xA;&lt;a&#xD;&#xA;  href=&#34;http://istio.doczh.cn/&#34;&#xD;&#xA;  &#xD;&#xA;    target=&#34;_blank&#34;&#xD;&#xA;  &#xD;&#xA;  &gt;istio 中文文档&lt;/a&#xD;&#xA;&gt;&#xD;&#xA;。&lt;/p&gt;&#xA;&lt;p&gt;原文参见&#xD;&#xA;&lt;a&#xD;&#xA;  href=&#34;https://istio.io/docs/tasks/traffic-management/traffic-shifting.html&#34;&#xD;&#xA;  &#xD;&#xA;    target=&#34;_blank&#34;&#xD;&#xA;  &#xD;&#xA;  &gt;Traffic Shifting&lt;/a&#xD;&#xA;&gt;&#xD;&#xA;。&lt;/p&gt;&#xA;&lt;p&gt;本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过 Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
